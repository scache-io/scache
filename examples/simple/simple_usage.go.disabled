package main

import (
	"fmt"
	"log"
	"time"

	"github.com/scache-io/scache"
)

func main() {
	fmt.Println("=== Simple Cache Usage Demo ===")

	// === 使用全局便捷API ===
	fmt.Println("\n--- Using Global Convenience API ---")

	// 设置字符串值
	err := scache.Set("greeting", "Hello, World!", time.Minute*30)
	if err != nil {
		log.Printf("SET error: %v", err)
	} else {
		fmt.Println("SET greeting successful")
	}

	// 获取值
	value, found, err := scache.Get("greeting")
	if err != nil {
		log.Printf("GET error: %v", err)
	} else if found {
		fmt.Printf("GET greeting: %v\n", value)
	} else {
		fmt.Println("GET greeting: not found")
	}

	// 检查键是否存在
	exists, err := scache.Exists("greeting")
	if err != nil {
		log.Printf("EXISTS error: %v", err)
	} else {
		fmt.Printf("EXISTS greeting: %v\n", exists)
	}

	// 获取键类型
	keyType, err := scache.Type("greeting")
	if err != nil {
		log.Printf("TYPE error: %v", err)
	} else {
		fmt.Printf("TYPE greeting: %s\n", keyType)
	}

	// === 列表操作 ===
	fmt.Println("\n--- List Operations ---")

	// 列表推入操作
	length, err := scache.LPush("numbers", 1, time.Hour)
	if err != nil {
		log.Printf("LPUSH error: %v", err)
	} else {
		fmt.Printf("LPUSH numbers, new length: %d\n", length)
	}

	length, err = scache.LPush("numbers", 2, time.Hour)
	if err != nil {
		log.Printf("LPUSH error: %v", err)
	} else {
		fmt.Printf("LPUSH numbers, new length: %d\n", length)
	}

	// 列表弹出操作
	popped, err := scache.RPop("numbers")
	if err != nil {
		log.Printf("RPOP error: %v", err)
	} else {
		fmt.Printf("RPOP numbers: %v\n", popped)
	}

	// === 哈希操作 ===
	fmt.Println("\n--- Hash Operations ---")

	// 哈希字段设置
	success, err := scache.HSet("profile", "name", "Alice", time.Hour)
	if err != nil {
		log.Printf("HSET error: %v", err)
	} else {
		fmt.Printf("HSET profile name: %v\n", success)
	}

	success, err = scache.HSet("profile", "email", "alice@example.com", time.Hour)
	if err != nil {
		log.Printf("HSET error: %v", err)
	} else {
		fmt.Printf("HSET profile email: %v\n", success)
	}

	// 哈希字段获取
	name, err := scache.HGet("profile", "name")
	if err != nil {
		log.Printf("HGET error: %v", err)
	} else {
		fmt.Printf("HGET profile name: %v\n", name)
	}

	email, err := scache.HGet("profile", "email")
	if err != nil {
		log.Printf("HGET error: %v", err)
	} else {
		fmt.Printf("HGET profile email: %v\n", email)
	}

	// === 过期时间操作 ===
	fmt.Println("\n--- TTL Operations ---")

	// 设置过期时间
	success, err = scache.Expire("greeting", time.Minute*5)
	if err != nil {
		log.Printf("EXPIRE error: %v", err)
	} else {
		fmt.Printf("EXPIRE greeting: %v\n", success)
	}

	// 获取剩余生存时间
	ttl, err := scache.TTL("greeting")
	if err != nil {
		log.Printf("TTL error: %v", err)
	} else {
		switch ttl {
		case -2:
			fmt.Println("TTL greeting: key does not exist")
		case -1:
			fmt.Println("TTL greeting: key does not expire")
		default:
			fmt.Printf("TTL greeting: %d seconds\n", ttl)
		}
	}

	// === 删除操作 ===
	fmt.Println("\n--- Delete Operations ---")

	// 删除键
	deleted, err := scache.Delete("greeting")
	if err != nil {
		log.Printf("DEL error: %v", err)
	} else {
		fmt.Printf("DEL greeting: %v\n", deleted)
	}

	// 再次尝试获取
	_, found, err = scache.Get("greeting")
	if err != nil {
		log.Printf("GET error: %v", err)
	} else if found {
		fmt.Println("GET greeting: still exists")
	} else {
		fmt.Println("GET greeting: not found (as expected)")
	}

	// === 统计信息 ===
	fmt.Println("\n--- Statistics ---")
	stats := scache.Stats()
	fmt.Printf("Cache Statistics: %+v\n", stats)

	// === 可用命令列表 ===
	fmt.Println("\n--- Available Commands ---")
	commands := scache.ListCommands()
	fmt.Printf("Available commands: %v\n", commands)

	fmt.Println("\nSimple usage demo completed!")
}

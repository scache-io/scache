// Code generated by scache. DO NOT EDIT.
// Package {{.Package}} provides auto-generated cache operations.
package {{.Package}}

import (
	"fmt"
	"time"

	"github.com/scache-io/scache"
)

{{range .Structs}}
// Store{{.Name}} 存储 {{.Name}} 到缓存
// 支持指针和值类型参数
func Store{{.Name}}(key string, obj *{{.Name}}, ttl ...time.Duration) error {
	return scache.Store(key, obj, ttl...)
}

// Load{{.Name}} 从缓存加载 {{.Name}}
// dest 必须是指针类型
func Load{{.Name}}(key string, dest *{{.Name}}) error {
	return scache.Load(key, dest)
}

// MustStore{{.Name}} 存储 {{.Name}} 到缓存，遇到错误会panic
func MustStore{{.Name}}(key string, obj *{{.Name}}, ttl ...time.Duration) {
	if err := Store{{.Name}}(key, obj, ttl...); err != nil {
		panic(fmt.Sprintf("Store{{.Name}} failed: %v", err))
	}
}

// MustLoad{{.Name}} 从缓存加载 {{.Name}}，遇到错误会panic
func MustLoad{{.Name}}(key string) *{{.Name}} {
	var result {{.Name}}
	if err := Load{{.Name}}(key, &result); err != nil {
		panic(fmt.Sprintf("Load{{.Name}} failed: %v", err))
	}
	return &result
}

// Store{{.Name}}WithKey 使用格式化key存储 {{.Name}}
func Store{{.Name}}WithKey(format string, args ...interface{}) func(*{{.Name}}, ...time.Duration) error {
	return func(obj *{{.Name}}, ttl ...time.Duration) error {
		key := fmt.Sprintf(format, args...)
		return Store{{.Name}}(key, obj, ttl...)
	}
}

// Load{{.Name}}WithKey 使用格式化key加载 {{.Name}}
func Load{{.Name}}WithKey(format string, args ...interface{}) func(*{{.Name}}) error {
	return func(dest *{{.Name}}) error {
		key := fmt.Sprintf(format, args...)
		return Load{{.Name}}(key, dest)
	}
}

{{end}}

// CacheStats 缓存统计信息
func CacheStats() interface{} {
	return scache.Stats()
}

// FlushCache 清空所有缓存
func FlushCache() error {
	return scache.Flush()
}

// CacheSize 获取缓存大小
func CacheSize() int {
	return scache.Size()
}
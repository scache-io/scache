// Code generated by scache. DO NOT EDIT.
package {{.Package}}

import (
	"fmt"
	"time"
	"sync"
)

{{range .Structs}}
// {{.Name}}Cache 缓存管理器
type {{.Name}}Cache struct {
	cache map[string]{{.Name}}
	mutex sync.RWMutex
}

// New{{.Name}}Cache 创建新的缓存实例
func New{{.Name}}Cache() *{{.Name}}Cache {
	return &{{.Name}}Cache{
		cache: make(map[string]{{.Name}}),
	}
}

// Store 存储 {{.Name}} 到缓存
func (c *{{.Name}}Cache) Store(key string, obj {{.Name}}, ttl time.Duration) error {
	c.mutex.Lock()
	defer c.mutex.Unlock()
	c.cache[key] = obj
	return nil
}

// Load 从缓存加载 {{.Name}}
func (c *{{.Name}}Cache) Load(key string) ({{.Name}}, error) {
	c.mutex.RLock()
	defer c.mutex.RUnlock()
	if obj, exists := c.cache[key]; exists {
		return obj, nil
	}
	return {{.Name}}{}, fmt.Errorf("key '%s' not found in cache", key)
}

// StorePtr 存储 {{.Name}} 指针到缓存
func (c *{{.Name}}Cache) StorePtr(key string, obj *{{.Name}}, ttl time.Duration) error {
	if obj == nil {
		return fmt.Errorf("cannot store nil pointer")
	}
	c.mutex.Lock()
	defer c.mutex.Unlock()
	c.cache[key] = *obj
	return nil
}

// LoadPtr 从缓存加载 {{.Name}} 指针
func (c *{{.Name}}Cache) LoadPtr(key string) (*{{.Name}}, error) {
	c.mutex.RLock()
	defer c.mutex.RUnlock()
	if obj, exists := c.cache[key]; exists {
		return &obj, nil
	}
	return nil, fmt.Errorf("key '%s' not found in cache", key)
}

// Delete 从缓存删除指定key
func (c *{{.Name}}Cache) Delete(key string) error {
	c.mutex.Lock()
	defer c.mutex.Unlock()
	delete(c.cache, key)
	return nil
}

// Clear 清空缓存
func (c *{{.Name}}Cache) Clear() error {
	c.mutex.Lock()
	defer c.mutex.Unlock()
	c.cache = make(map[string]{{.Name}})
	return nil
}

// Size 获取缓存大小
func (c *{{.Name}}Cache) Size() int {
	c.mutex.RLock()
	defer c.mutex.RUnlock()
	return len(c.cache)
}

// Keys 获取所有缓存键
func (c *{{.Name}}Cache) Keys() []string {
	c.mutex.RLock()
	defer c.mutex.RUnlock()
	keys := make([]string, 0, len(c.cache))
	for key := range c.cache {
		keys = append(keys, key)
	}
	return keys
}

// MustStore 存储 {{.Name}} 到缓存，遇到错误会panic
func (c *{{.Name}}Cache) MustStore(key string, obj {{.Name}}, ttl time.Duration) {
	if err := c.Store(key, obj, ttl); err != nil {
		panic(fmt.Sprintf("Store{{.Name}} failed: %v", err))
	}
}

// MustLoad 从缓存加载 {{.Name}}，遇到错误会panic
func (c *{{.Name}}Cache) MustLoad(key string) {{.Name}} {
	if obj, err := c.Load(key); err != nil {
		panic(fmt.Sprintf("Load{{.Name}} failed: %v", err))
	} else {
		return obj
	}
}

// MustStorePtr 存储 {{.Name}} 指针到缓存，遇到错误会panic
func (c *{{.Name}}Cache) MustStorePtr(key string, obj *{{.Name}}, ttl time.Duration) {
	if err := c.StorePtr(key, obj, ttl); err != nil {
		panic(fmt.Sprintf("Store{{.Name}}Ptr failed: %v", err))
	}
}

// MustLoadPtr 从缓存加载 {{.Name}} 指针，遇到错误会panic
func (c *{{.Name}}Cache) MustLoadPtr(key string) *{{.Name}} {
	if obj, err := c.LoadPtr(key); err != nil {
		panic(fmt.Sprintf("Load{{.Name}}Ptr failed: %v", err))
	} else {
		return obj
	}
}

// 默认缓存实例
var default{{.Name}}Cache = New{{.Name}}Cache()

// Get{{.Name}}Scache 获取默认的{{.Name}}缓存实例（推荐使用）
func Get{{.Name}}Scache() *{{.Name}}Scache {
	return &{{.Name}}Scache{
		cache: default{{.Name}}Cache,
	}
}

{{end}}

// Scache 通用缓存接口
type Scache interface {
	Store(key string, obj interface{}, ttl ...time.Duration) error
	Load(key string) (interface{}, error)
	Delete(key string) error
	Clear() error
	Size() int
	Keys() []string
}

{{range .Structs}}
// {{.Name}}Scache 带缓存功能的{{.Name}}结构体（高级接口）
type {{.Name}}Scache struct {
	cache *{{.Name}}Cache
}

// New{{.Name}}Scache 创建新的{{.Name}}缓存实例
func New{{.Name}}Scache() *{{.Name}}Scache {
	return &{{.Name}}Scache{
		cache: New{{.Name}}Cache(),
	}
}

// Store 存储 {{.Name}} 到缓存
func (s *{{.Name}}Scache) Store(key string, obj {{.Name}}, ttl ...time.Duration) error {
	return s.cache.Store(key, obj, getTTL(ttl...))
}

// Load 从缓存加载 {{.Name}}
func (s *{{.Name}}Scache) Load(key string) ({{.Name}}, error) {
	return s.cache.Load(key)
}

// StorePtr 存储 {{.Name}} 指针到缓存
func (s *{{.Name}}Scache) StorePtr(key string, obj *{{.Name}}, ttl ...time.Duration) error {
	return s.cache.StorePtr(key, obj, getTTL(ttl...))
}

// LoadPtr 从缓存加载 {{.Name}} 指针
func (s *{{.Name}}Scache) LoadPtr(key string) (*{{.Name}}, error) {
	return s.cache.LoadPtr(key)
}

// Delete 从缓存删除指定key
func (s *{{.Name}}Scache) Delete(key string) error {
	return s.cache.Delete(key)
}

// Clear 清空缓存
func (s *{{.Name}}Scache) Clear() error {
	return s.cache.Clear()
}

// Size 获取缓存大小
func (s *{{.Name}}Scache) Size() int {
	return s.cache.Size()
}

// Keys 获取所有缓存键
func (s *{{.Name}}Scache) Keys() []string {
	return s.cache.Keys()
}

// MustStore 存储 {{.Name}} 到缓存，遇到错误会panic
func (s *{{.Name}}Scache) MustStore(key string, obj {{.Name}}, ttl ...time.Duration) {
	s.cache.MustStore(key, obj, getTTL(ttl...))
}

// MustLoad 从缓存加载 {{.Name}}，遇到错误会panic
func (s *{{.Name}}Scache) MustLoad(key string) {{.Name}} {
	return s.cache.MustLoad(key)
}

// MustStorePtr 存储 {{.Name}} 指针到缓存，遇到错误会panic
func (s *{{.Name}}Scache) MustStorePtr(key string, obj *{{.Name}}, ttl ...time.Duration) {
	s.cache.MustStorePtr(key, obj, getTTL(ttl...))
}

// MustLoadPtr 从缓存加载 {{.Name}} 指针，遇到错误会panic
func (s *{{.Name}}Scache) MustLoadPtr(key string) *{{.Name}} {
	return s.cache.MustLoadPtr(key)
}

// WithKey 使用格式化key操作，返回固定key的操作器
func (s *{{.Name}}Scache) WithKey(format string, args ...interface{}) *{{.Name}}ScacheKey {
	return &{{.Name}}ScacheKey{
		scache: s,
		key:    fmt.Sprintf(format, args...),
	}
}

// {{.Name}}ScacheKey 固定key的{{.Name}}缓存操作器
type {{.Name}}ScacheKey struct {
	scache *{{.Name}}Scache
	key    string
}

// Store 存储 {{.Name}} 到缓存
func (k *{{.Name}}ScacheKey) Store(obj {{.Name}}, ttl ...time.Duration) error {
	return k.scache.Store(k.key, obj, ttl...)
}

// Load 从缓存加载 {{.Name}}
func (k *{{.Name}}ScacheKey) Load() ({{.Name}}, error) {
	return k.scache.Load(k.key)
}

// StorePtr 存储 {{.Name}} 指针到缓存
func (k *{{.Name}}ScacheKey) StorePtr(obj *{{.Name}}, ttl ...time.Duration) error {
	return k.scache.StorePtr(k.key, obj, ttl...)
}

// LoadPtr 从缓存加载 {{.Name}} 指针
func (k *{{.Name}}ScacheKey) LoadPtr() (*{{.Name}}, error) {
	return k.scache.LoadPtr(k.key)
}

// Delete 从缓存删除
func (k *{{.Name}}ScacheKey) Delete() error {
	return k.scache.Delete(k.key)
}

// MustStore 存储 {{.Name}} 到缓存，遇到错误会panic
func (k *{{.Name}}ScacheKey) MustStore(obj {{.Name}}, ttl ...time.Duration) {
	k.scache.MustStore(k.key, obj, ttl...)
}

// MustLoad 从缓存加载 {{.Name}}，遇到错误会panic
func (k *{{.Name}}ScacheKey) MustLoad() {{.Name}} {
	return k.scache.MustLoad(k.key)
}

// MustStorePtr 存储 {{.Name}} 指针到缓存，遇到错误会panic
func (k *{{.Name}}ScacheKey) MustStorePtr(obj *{{.Name}}, ttl ...time.Duration) {
	k.scache.MustStorePtr(k.key, obj, ttl...)
}

// MustLoadPtr 从缓存加载 {{.Name}} 指针，遇到错误会panic
func (k *{{.Name}}ScacheKey) MustLoadPtr() *{{.Name}} {
	return k.scache.MustLoadPtr(k.key)
}

{{end}}

// getTTL 获取TTL时间，工具函数
func getTTL(ttl ...time.Duration) time.Duration {
	if len(ttl) > 0 {
		return ttl[0]
	}
	return time.Hour // 默认1小时
}
package generator

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

// generateCode 生成缓存代码
func generateCode(config *Config, structs []StructInfo) (string, error) {
	// 获取模板文件路径 - 相对于运行目录
	templatePath := "generator/cache.tpl"

	// 检查模板文件是否存在
	if _, err := os.Stat(templatePath); os.IsNotExist(err) {
		return "", fmt.Errorf("模板文件不存在: %s", templatePath)
	}

	// 读取模板文件
	templateContent, err := os.ReadFile(templatePath)
	if err != nil {
		return "", fmt.Errorf("读取模板文件失败: %v", err)
	}

	// 解析模板
	tmpl, err := template.New("cache").Parse(string(templateContent))
	if err != nil {
		return "", fmt.Errorf("解析模板失败: %v", err)
	}

	data := struct {
		Package string
		Structs []StructInfo
	}{
		Package: config.Package,
		Structs: structs,
	}

	var buf strings.Builder
	if err := tmpl.Execute(&buf, data); err != nil {
		return "", fmt.Errorf("执行模板失败: %v", err)
	}

	return buf.String(), nil
}

// generateSingleFile 生成单个文件 (已弃用，只保留分包功能)
func generateSingleFile(config *Config, structs []StructInfo) error {
	return fmt.Errorf("单文件模式已弃用，请使用分包模式")
}

// generateSplitPackages 按结构体分包生成
func generateSplitPackages(config *Config, structs []StructInfo) error {
	// 创建 scache 主包
	if err := generateMainPackage(config); err != nil {
		return err
	}

	// 为每个结构体创建单独的包
	for _, structInfo := range structs {
		if err := generateStructPackage(config, structInfo); err != nil {
			return err
		}
	}

	return nil
}

// generateMainPackage 生成主包
func generateMainPackage(config *Config) error {
	// 创建 scache 目录 - 使用绝对路径
	absDir, err := filepath.Abs(config.Dir)
	if err != nil {
		return err
	}
	scacheDir := filepath.Join(absDir, "scache")
	if err := os.MkdirAll(scacheDir, 0755); err != nil {
		return err
	}

	// 生成主包代码
	mainCode := fmt.Sprintf(`// Code generated by scache. DO NOT EDIT.
package scache

import (
	"time"
	"github.com/scache-io/scache"
)

%s`, generateUtilityFunctions())

	mainPath := filepath.Join(scacheDir, "cache.go")
	fmt.Printf("✅ 生成主包: %s\n", mainPath)
	return os.WriteFile(mainPath, []byte(mainCode), 0644)
}

// generateUtilityFunctions 生成工具函数
func generateUtilityFunctions() string {
	return `
// CacheStats 缓存统计信息
func CacheStats() interface{} {
	return scache.Stats()
}

// FlushCache 清空所有缓存
func FlushCache() error {
	return scache.Flush()
}

// CacheSize 获取缓存大小
func CacheSize() int {
	return scache.Size()
}
`
}

// generateStructPackage 生成单个结构体的包
func generateStructPackage(config *Config, structInfo StructInfo) error {
	// 创建结构体包目录 - 使用绝对路径
	absDir, err := filepath.Abs(config.Dir)
	if err != nil {
		return err
	}
	structDir := filepath.Join(absDir, "scache", strings.ToLower(structInfo.Name))
	if err := os.MkdirAll(structDir, 0755); err != nil {
		return err
	}

	// 生成结构体包代码
	data := struct {
		Package string
		Structs []StructInfo
	}{
		Package: strings.ToLower(structInfo.Name),
		Structs: []StructInfo{structInfo},
	}

	// 读取模板文件
	templatePath := "generator/cache.tpl"
	templateContent, err := os.ReadFile(templatePath)
	if err != nil {
		return fmt.Errorf("读取模板文件失败: %v", err)
	}

	// 解析模板
	tmpl, err := template.New("cache").Parse(string(templateContent))
	if err != nil {
		return fmt.Errorf("解析模板失败: %v", err)
	}

	var buf strings.Builder
	if err := tmpl.Execute(&buf, data); err != nil {
		return fmt.Errorf("执行模板失败: %v", err)
	}

	// 写入文件
	structPath := filepath.Join(structDir, "cache.go")
	fmt.Printf("✅ 生成结构体包: %s\n", structPath)
	return os.WriteFile(structPath, []byte(buf.String()), 0644)
}
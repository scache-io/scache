// Code generated by scache. DO NOT EDIT.
package {{.Package}}

import (
	"fmt"
	"time"
	"sync"

	"github.com/scache-io/scache"
	"github.com/scache-io/scache/config"
)

{{range .Structs}}
var (
	default{{.Name}}Scache *Scache[{{.Name}}]
	default{{.Name}}ScacheOnce sync.Once
)
{{end}}

{{range .Structs}}
func Get{{.Name}}Scache() *Scache[{{.Name}}] {
	default{{.Name}}ScacheOnce.Do(func() {
		default{{.Name}}Scache = NewScache[{{.Name}}]()
	})
	return default{{.Name}}Scache
}

func New{{.Name}}Scache(opts ...config.EngineOption) *Scache[{{.Name}}] {
	return NewScache[{{.Name}}](opts...)
}
{{end}}

type Scache[T any] struct {
	cache *scache.LocalCache
}

func NewScache[T any](opts ...config.EngineOption) *Scache[T] {
	return &Scache[T]{
		cache: scache.New(opts...),
	}
}

func (s *Scache[T]) Store(key string, obj T, ttl ...time.Duration) error {
	return s.cache.Store(key, obj, ttl...)
}

func (s *Scache[T]) Load(key string) (T, error) {
	var obj T
	err := s.cache.Load(key, &obj)
	if err != nil {
		return obj, fmt.Errorf("key '%s' not found in cache: %w", key, err)
	}
	return obj, nil
}

func (s *Scache[T]) Delete(key string) error {
	s.cache.Delete(key)
	return nil
}

func (s *Scache[T]) Exists(key string) bool {
	return s.cache.Exists(key)
}

func (s *Scache[T]) SetTTL(key string, ttl time.Duration) error {
	success := s.cache.Expire(key, ttl)
	if !success {
		return fmt.Errorf("failed to set TTL for key '%s'", key)
	}
	return nil
}

func (s *Scache[T]) GetTTL(key string) (time.Duration, bool) {
	return s.cache.TTL(key)
}

func (s *Scache[T]) Clear() error {
	return s.cache.Flush()
}

func (s *Scache[T]) Size() int {
	return s.cache.Size()
}

func (s *Scache[T]) Keys() []string {
	return s.cache.Keys()
}
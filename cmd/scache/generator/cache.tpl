// Code generated by scache. DO NOT EDIT.
package {{.Package}}

import (
	"fmt"
	"time"
	"sync"

	"github.com/scache-io/scache"
	"github.com/scache-io/scache/config"
)

{{range .Structs}}

// 默认缓存实例 - 懒汉式单例
var (
	default{{.Name}}Scache *{{.Name}}Scache
	default{{.Name}}ScacheOnce sync.Once
)

// Get{{.Name}}Scache 获取默认的{{.Name}}缓存实例（懒汉式单例，推荐使用）
func Get{{.Name}}Scache() *{{.Name}}Scache {
	default{{.Name}}ScacheOnce.Do(func() {
		default{{.Name}}Scache = New{{.Name}}Scache()
	})
	return default{{.Name}}Scache
}

// {{.Name}}Scache 基于scache库的{{.Name}}结构体缓存管理器
type {{.Name}}Scache struct {
	cache *scache.LocalCache
}

// New{{.Name}}Scache 创建新的{{.Name}}缓存实例
func New{{.Name}}Scache(opts ...config.EngineOption) *{{.Name}}Scache {
	return &{{.Name}}Scache{
		cache: scache.New(opts...),
	}
}

// Store 存储 {{.Name}} 到缓存
func (s *{{.Name}}Scache) Store(key string, obj {{.Name}}, ttl ...time.Duration) error {
	return s.cache.Store(key, obj, ttl...)
}

// Load 从缓存加载 {{.Name}}
func (s *{{.Name}}Scache) Load(key string) ({{.Name}}, error) {
	var obj {{.Name}}
	err := s.cache.Load(key, &obj)
	if err != nil {
		return {{.Name}}{}, fmt.Errorf("key '%s' not found in cache: %w", key, err)
	}
	return obj, nil
}

// StorePtr 存储 {{.Name}} 指针到缓存
func (s *{{.Name}}Scache) StorePtr(key string, obj *{{.Name}}, ttl ...time.Duration) error {
	if obj == nil {
		return fmt.Errorf("cannot store nil pointer")
	}
	return s.cache.Store(key, obj, ttl...)
}

// LoadPtr 从缓存加载 {{.Name}} 指针
func (s *{{.Name}}Scache) LoadPtr(key string) (*{{.Name}}, error) {
	var obj {{.Name}}
	err := s.cache.Load(key, &obj)
	if err != nil {
		return nil, fmt.Errorf("key '%s' not found in cache: %w", key, err)
	}
	return &obj, nil
}

// Delete 从缓存删除指定key
func (s *{{.Name}}Scache) Delete(key string) error {
	s.cache.Delete(key)
	return nil
}

// Clear 清空缓存
func (s *{{.Name}}Scache) Clear() error {
	return s.cache.Flush()
}

// Size 获取缓存大小
func (s *{{.Name}}Scache) Size() int {
	return s.cache.Size()
}

// Keys 获取所有缓存键
func (s *{{.Name}}Scache) Keys() []string {
	return s.cache.Keys()
}

// Exists 检查key是否存在
func (s *{{.Name}}Scache) Exists(key string) bool {
	return s.cache.Exists(key)
}

// SetTTL 设置key的过期时间
func (s *{{.Name}}Scache) SetTTL(key string, ttl time.Duration) error {
	success := s.cache.Expire(key, ttl)
	if !success {
		return fmt.Errorf("failed to set TTL for key '%s'", key)
	}
	return nil
}

// GetTTL 获取key的剩余生存时间
func (s *{{.Name}}Scache) GetTTL(key string) (time.Duration, bool) {
	return s.cache.TTL(key)
}

// MustStore 存储 {{.Name}} 到缓存，遇到错误会panic
func (s *{{.Name}}Scache) MustStore(key string, obj {{.Name}}, ttl ...time.Duration) {
	if err := s.Store(key, obj, ttl...); err != nil {
		panic(fmt.Sprintf("Store{{.Name}} failed: %v", err))
	}
}

// MustLoad 从缓存加载 {{.Name}}，遇到错误会panic
func (s *{{.Name}}Scache) MustLoad(key string) {{.Name}} {
	if obj, err := s.Load(key); err != nil {
		panic(fmt.Sprintf("Load{{.Name}} failed: %v", err))
	} else {
		return obj
	}
}

// MustStorePtr 存储 {{.Name}} 指针到缓存，遇到错误会panic
func (s *{{.Name}}Scache) MustStorePtr(key string, obj *{{.Name}}, ttl ...time.Duration) {
	if err := s.StorePtr(key, obj, ttl...); err != nil {
		panic(fmt.Sprintf("Store{{.Name}}Ptr failed: %v", err))
	}
}

// MustLoadPtr 从缓存加载 {{.Name}} 指针，遇到错误会panic
func (s *{{.Name}}Scache) MustLoadPtr(key string) *{{.Name}} {
	if obj, err := s.LoadPtr(key); err != nil {
		panic(fmt.Sprintf("Load{{.Name}}Ptr failed: %v", err))
	} else {
		return obj
	}
}

// WithKey 使用格式化key操作，返回固定key的操作器
func (s *{{.Name}}Scache) WithKey(format string, args ...interface{}) *{{.Name}}ScacheKey {
	return &{{.Name}}ScacheKey{
		scache: s,
		key:    fmt.Sprintf(format, args...),
	}
}

// {{.Name}}ScacheKey 固定key的{{.Name}}缓存操作器
type {{.Name}}ScacheKey struct {
	scache *{{.Name}}Scache
	key    string
}

// Store 存储 {{.Name}} 到缓存
func (k *{{.Name}}ScacheKey) Store(obj {{.Name}}, ttl ...time.Duration) error {
	return k.scache.Store(k.key, obj, ttl...)
}

// Load 从缓存加载 {{.Name}}
func (k *{{.Name}}ScacheKey) Load() ({{.Name}}, error) {
	return k.scache.Load(k.key)
}

// StorePtr 存储 {{.Name}} 指针到缓存
func (k *{{.Name}}ScacheKey) StorePtr(obj *{{.Name}}, ttl ...time.Duration) error {
	return k.scache.StorePtr(k.key, obj, ttl...)
}

// LoadPtr 从缓存加载 {{.Name}} 指针
func (k *{{.Name}}ScacheKey) LoadPtr() (*{{.Name}}, error) {
	return k.scache.LoadPtr(k.key)
}

// Delete 从缓存删除
func (k *{{.Name}}ScacheKey) Delete() error {
	return k.scache.Delete(k.key)
}

// Exists 检查key是否存在
func (k *{{.Name}}ScacheKey) Exists() bool {
	return k.scache.Exists(k.key)
}

// SetTTL 设置key的过期时间
func (k *{{.Name}}ScacheKey) SetTTL(ttl time.Duration) error {
	return k.scache.SetTTL(k.key, ttl)
}

// GetTTL 获取key的剩余生存时间
func (k *{{.Name}}ScacheKey) GetTTL() (time.Duration, bool) {
	return k.scache.GetTTL(k.key)
}

// MustStore 存储 {{.Name}} 到缓存，遇到错误会panic
func (k *{{.Name}}ScacheKey) MustStore(obj {{.Name}}, ttl ...time.Duration) {
	k.scache.MustStore(k.key, obj, ttl...)
}

// MustLoad 从缓存加载 {{.Name}}，遇到错误会panic
func (k *{{.Name}}ScacheKey) MustLoad() {{.Name}} {
	return k.scache.MustLoad(k.key)
}

// MustStorePtr 存储 {{.Name}} 指针到缓存，遇到错误会panic
func (k *{{.Name}}ScacheKey) MustStorePtr(obj *{{.Name}}, ttl ...time.Duration) {
	k.scache.MustStorePtr(k.key, obj, ttl...)
}

// MustLoadPtr 从缓存加载 {{.Name}} 指针，遇到错误会panic
func (k *{{.Name}}ScacheKey) MustLoadPtr() *{{.Name}} {
	return k.scache.MustLoadPtr(k.key)
}

{{end}}